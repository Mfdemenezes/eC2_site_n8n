name: 'Terraform AWS Infrastructure'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  TF_VAR_region: "us-east-1"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.5"

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Verify AWS credentials
    - name: Verify AWS credentials
      run: |
        echo "Verificando credenciais AWS..."
        aws sts get-caller-identity

    # Upload configurations to S3 (if bucket exists)
    - name: Upload configurations to S3
      run: |
        if [ -f "./upload-to-s3.sh" ]; then
          echo "Executando upload para S3..."
          chmod +x upload-to-s3.sh
          ./upload-to-s3.sh || echo "Upload falhou, continuando com configuração padrão..."
        else
          echo "Script upload-to-s3.sh não encontrado, pulando upload..."
        fi

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -reconfigure

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Validates the configuration files in a directory, referring only to the configuration and not accessing any remote services
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        echo "Criando plano de execução..."
        terraform plan -input=false -out=tfplan
        terraform show tfplan

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Deploy automático na branch main..."
        terraform apply -auto-approve -input=false tfplan
        echo "Deploy concluído!"

    # Generate outputs
    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Gerando outputs..."
        terraform output -json > outputs.json
        echo "📋 Outputs gerados:"
        cat outputs.json

    # Upload outputs as artifacts
    - name: Upload outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: outputs.json
        retention-days: 30

    # Display infrastructure information
    - name: Display Infrastructure Info
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "🎉 Deploy concluído com sucesso!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 Informações da Infraestrutura:"
        if [ -f "outputs.json" ]; then
          echo "🎯 Elastic IPs:"
          cat outputs.json | jq -r '.elastic_ips.value[]?' 2>/dev/null || echo "Elastic IPs não encontrados"
          echo "🌐 URLs de acesso:"
          ELASTIC_IP=$(cat outputs.json | jq -r '.elastic_ips.value[0]?' 2>/dev/null)
          if [ "$ELASTIC_IP" != "null" ] && [ -n "$ELASTIC_IP" ]; then
            echo "   Website: http://$ELASTIC_IP"
            echo "   N8N: http://$ELASTIC_IP/n8n"
            echo "   Health: http://$ELASTIC_IP/health"
          fi
        fi
        echo "🔐 N8N Login: admin / adminpass123"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
