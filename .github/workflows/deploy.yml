name: '🚀 AWS Infrastructure - Deploy'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - validate
          - plan
          - apply
      environment:
        description: 'Environment'
        required: true
        default: 'Dev'
        type: choice
        options:
          - Dev
          - Staging
          - Production

permissions:
  contents: read

env:
  TF_VAR_region: "us-east-1"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  validate:
    name: '✅ Terraform Validate'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event_name == 'push' || github.event_name == 'pull_request'
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.5"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Verify AWS credentials
      run: |
        echo "🔐 Verificando credenciais AWS..."
        aws sts get-caller-identity

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Terraform Format
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: |
        echo "✅ Validando configuração Terraform..."
        terraform validate
        echo "✅ Configuração válida!"

  plan:
    name: '📋 Terraform Plan'
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event_name == 'push' || github.event_name == 'pull_request'
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.5"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Terraform Plan
      run: |
        echo "📋 Criando plano de execução..."
        terraform plan -input=false -out=tfplan
        echo "📋 Exibindo plano:"
        terraform show tfplan

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan
        retention-days: 5

  apply:
    name: '🚀 Terraform Apply'
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: (github.event.inputs.action == 'apply') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.5"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
      continue-on-error: true

    - name: Terraform Apply
      run: |
        echo "🚀 Aplicando infraestrutura AWS..."
        if [ -f "tfplan" ]; then
          echo "📋 Usando plano salvo"
          terraform apply -auto-approve tfplan
        else
          echo "📋 Aplicando diretamente"
          terraform apply -auto-approve
        fi
        echo "✅ Deploy concluído!"

    - name: Terraform Output
      run: |
        echo "📋 Gerando outputs..."
        terraform output -json > outputs.json
        echo "📋 Outputs gerados:"
        cat outputs.json

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: outputs.json
        retention-days: 30

    - name: Display Infrastructure Info
      run: |
        echo "🎉 Deploy concluído com sucesso!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 Informações da Infraestrutura AWS:"
        if [ -f "outputs.json" ]; then
          echo "🎯 IPs das Instâncias EC2:"
          cat outputs.json | jq -r '.instance_public_ips.value[]?' 2>/dev/null || echo "IPs não encontrados"
          echo "🌐 Acesso SSH:"
          PUBLIC_IP=$(cat outputs.json | jq -r '.instance_public_ips.value[0]?' 2>/dev/null)
          if [ "$PUBLIC_IP" != "null" ] && [ -n "$PUBLIC_IP" ]; then
            echo "   ssh -i sua-chave.pem ec2-user@$PUBLIC_IP"
          fi
        fi
        echo "🐳 Docker e Git instalados e prontos para uso"
        echo "💻 Infraestrutura base pronta para desenvolvimento"
        echo "🗑️ Para destruir: Execute o workflow 'Destroy AWS Infrastructure'"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
